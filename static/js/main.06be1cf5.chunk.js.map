{"version":3,"sources":["Todo.js","Comments.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","componentDidMount","renderTasks","onChange","event","setState","task","target","value","onSubmit","taskList","JSON","parse","localStorage","getItem","slice","taskObject","state","push","setItem","stringify","removeTask","index","splice","tasks","map","Card","Group","className","fluid","color","inline","Content","Header","Meta","textAlign","Button","onClick","negative","compact","icon","Icon","name","Form","this","Input","type","action","placeholder","Component","Comments","renderComments","comment","comments","commentObject","commentList","preventDefault","reset","Comment","Avatar","src","Author","as","Text","dividing","TextArea","content","labelPosition","App","title","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06be1cf5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Form, Input, Icon, Card} from 'semantic-ui-react'\n\n\nexport default class Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      task: \"\",\n      taskList: [],\n    };\n  }\n\n  // on load get the task list\n  componentDidMount = () => {\n    this.renderTasks()\n  };\n\n  onChange = event => {\n    this.setState({\n      task: event.target.value\n    });\n  };\n\n  onSubmit = () => {\n    let taskList = JSON.parse(localStorage.getItem('taskList'))\n    if (taskList == null) {taskList = []}\n    taskList.slice()\n    let taskObject = {task: this.state.task}\n    taskList.push(taskObject)\n    localStorage.setItem('taskList', JSON.stringify(taskList))\n    this.setState({\n      task: \"\",\n      taskList: taskList\n    })\n  };\n\n  removeTask = (index) => {\n    let taskList = JSON.parse(localStorage.getItem('taskList'))\n    taskList.splice(index, 1)\n    localStorage.setItem('taskList', JSON.stringify(taskList))\n    this.setState({\n      taskList: taskList\n    })\n    this.renderTasks()\n  }\n\n  renderTasks = () => {\n    let tasks = JSON.parse(localStorage.getItem('taskList'))\n    if (tasks != null) {\n      return (\n        <div>\n          {tasks.map((task, index) => {\n            return (\n              <div>\n              <Card.Group>\n              <Card className=\"taskCard\" fluid color='blue' inline>\n                <Card.Content>\n                  <Card.Header>‚≠êÔ∏è  {task.task}</Card.Header>\n                  <Card.Meta textAlign='right'>\n                    <div className=\"deleteTask\">\n                      <Button onClick={() => this.removeTask(task.index)} negative compact icon>\n                        <Icon name='remove'/>\n                      </Button>\n                    </div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n              </Card.Group>\n              </div>\n            )\n          })}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"toDoContainer\">\n          <div className=\"taskFormContainer\">\n          <Form onSubmit={this.onSubmit}>\n            <Input fluid\n              type=\"text\"\n              name=\"task\"\n              action={{icon: 'plus', color:'teal'}}\n              value={this.state.task}\n              onChange={this.onChange}\n              placeholder=\"Add task\"/>\n          </Form>\n          </div>\n          <div className=\"savedTasksContainer\">{this.renderTasks()}</div>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {Button, Form, Header, Comment} from 'semantic-ui-react'\n\nexport default class Comments extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      comment: \"\",\n      commentList: []\n    }\n  }\n\n  componentDidMount = () => {\n    this.renderComments()\n  }\n\n  onChange = (event) => {\n    this.setState({comment: event.target.value})\n  }\n\n\n  onSubmit = (event) => {\n    let comments = JSON.parse(localStorage.getItem('commentList'))\n    if (comments == null) {comments = []}\n    comments.slice();\n    let commentObject = {\n      comment: this.state.comment,\n      // datePosted: new Date().toUTCString()\n    }\n    var time = commentObject.datePosted;\n    // commentObject.datePosted = time.getMonth() + 1 + \"/\" + time.getDate() + \"/20\"\n    comments.push(commentObject)\n    localStorage.setItem('commentList', JSON.stringify(comments))\n    this.setState({\n      comment: \"\",\n      commentList: comments\n    })\n    event.preventDefault();\n    event.target.reset();\n  }\n\n  renderComments = () => {\n    let comments = JSON.parse(localStorage.getItem('commentList'))\n    if (comments != null) {\n      return (\n        <div>\n        {comments.map(comment => {\n          return (\n            <div>\n            <Comment.Group>\n            <Comment>\n              <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/jenny.jpg' />\n              <Comment.Content>\n                <Comment.Author as='a'>Anonymous</Comment.Author>\n                {/*<Comment.Metadata>\n                  <div>on  {comment.datePosted}</div>\n                </Comment.Metadata>*/}\n                <Comment.Text>{comment.comment}</Comment.Text>\n              </Comment.Content>\n            </Comment>\n            </Comment.Group>\n            </div>\n          )\n        })}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"feedContainer\">\n        <Header as='h3' dividing>Comments</Header>\n        <div className=\"comments\">{this.renderComments()}</div>\n        <Form onSubmit={this.onSubmit}>\n          <Form.TextArea onChange={this.onChange}/>\n          <Button content='Add Comment' labelPosition='left' icon='edit' compact color='teal'/>\n        </Form>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Todo from './Todo.js'\nimport Comments from './Comments.js'\n\n\n\nfunction App() {\n  const title = <div id=\"toDoTitle\"><h1>üìù Todo App</h1></div>\n  return (\n    <div>\n      {title}\n      <div><Todo></Todo></div>\n      <div className=\"feedContainer\"><Comments></Comments></div>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}